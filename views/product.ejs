<!DOCTYPE html>
<html lang="en">
<head>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>
	<script src="alert/dist/sweetalert-dev.js"></script>
	<link rel="stylesheet" href="alert/dist/sweetalert.css">
	<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Nabla&display=swap" rel="stylesheet">
  <style>
    .card-body{
      align-items: center;
      justify-content: center;
      text-align: center;
  }
  
    #mycart{
      visibility: hidden
    }
    @media only screen and (max-width: 880px) {
      #cart{
        visibility: visible;
        float: right;
      
        
      }

}
  



  </style>
  <link rel="stylesheet" href="https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css">
  <script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.js" defer></script>
    <style>
      [x-cloak] {
        display: none;
      }
  
      @media print {
        .no-printme  {
          display: none;
        }
        .printme  {
          display: block;
        }
        body {
          line-height: 1.2;
		
        }
      }
  
      @page {
        size: A4 portrait;
        counter-increment: page;
      }
  
      /* Datepicker */
      .date-input {
        background-color: #fff;
        border-radius: 10px;
        padding: 0.5rem 1rem;
        z-index: 2000;
        margin: 3px 0 0 0;
        border-top: 1px solid #eee;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
          0 4px 6px -2px rgba(0, 0, 0, 0.05);
      }
      .date-input.is-hidden {
        display: none;
      }
      .date-input .pika-title {
        padding: 0.5rem;
        width: 100%;
        text-align: center;
      }
      .date-input .pika-prev,
      .date-input .pika-next {
        margin-top: 0;
        /* margin-top: 0.5rem; */
        padding: 0.2rem 0;
        cursor: pointer;
        color: #4299e1;
        text-transform: uppercase;
        font-size: 0.85rem;
      }
      .date-input .pika-prev:hover,
      .date-input .pika-next:hover {
        text-decoration: underline;
      }
      .date-input .pika-prev {
        float: left;
      }
      .date-input .pika-next {
        float: right;
      }
      .date-input .pika-label {
        display: inline-block;
        font-size: 0;
      }
      .date-input .pika-select-month,
      .date-input .pika-select-year {
        display: inline-block;
        border: 1px solid #ddd;
        color: #444;
        background-color: #fff;
        border-radius: 10px;
        font-size: 0.9rem;
        padding-left: 0.5em;
        padding-right: 0.5em;
        padding-top: 0.25em;
        padding-bottom: 0.25em;
        appearance: none;
      }
      .date-input .pika-select-month:focus,
      .date-input .pika-select-year:focus {
        border-color: #cbd5e0;
        outline: none;
      }
      .date-input .pika-select-month {
        margin-right: 0.25em;
      }
      .date-input table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 0.2rem;
      }
      .date-input table th {
        width: 2em;
        height: 2em;
        font-weight: normal;
        color: #718096;
        text-align: center;
      }
      .date-input table th abbr {
        text-decoration: none;
      }
      .date-input table td {
        padding: 2px;
      }
      .date-input table td button {
        /* border: 1px solid #e2e8f0; */
        width: 1.8em;
        height: 1.8em;
        text-align: center;
        color: #555;
        border-radius: 10px;
      }
      .date-input table td button:hover {
        background-color: #bee3f8;
      }
      .date-input table td.is-today button {
        background-color: #ebf8ff;
      }
      .date-input table td.is-selected button {
        background-color: #3182ce;
      }
      .date-input table td.is-selected button {
        color: white;
      }
      .date-input table td.is-selected button:hover {
        color: white;
      }
	  @media print {
  title {
    display: none;
  }
}
@media print {
  .note-section {
    display: none;
  }
}

    </style>
  
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title >Shopping Cart</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.2/jspdf.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.15/jspdf.plugin.autotable.min.js"></script>
  <link href="https://getbootstrap.com/docs/5.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
</head>

<!-- partial:index.partial.html -->

  <div class="container">
    <div class="row mt-5">
      <div class="col-md-8">
        <a href="#table" class="btn btn-success" style="width: fit-content;height: fit-content;"id="mycart">GoToCart</a>
        <h2>Products</h2>
        <div class="row" id="products">
          <% products.forEach(product => { %>
            <div class="col-md-4 mb-3">
              <div class="card">
                <div class="card-body">
                  <img src="data:image/jpeg;base64,<%= product.images.data.toString('base64') %>"  style="width:100px;height:100px;" class="img-fluid">
                  <h5 class="card-title"><%= product.name %></h5>
                  <p class="card-text">₹<%= product.price %></p>
                  <button class="btn btn-success" onclick="addToCart('<%= product._id %>', '<%= product.name %>',' <%= product.price %>');myaddToCart('<%= product._id %>', '<%= product.name %>',' <%= product.price %>')">Add to Cart</button>
                 

                </div>
              </div>
            </div>
          <% }); %>
        </div>
      </div>
      <div class="col-md-4">
        <div class="card card2">
                        <div class="card-header"><b>Shopping Cart</b></div>
                        <div class="card-body">
                            <div class="table-responsive">
        <h2>Shopping Cart</h2>
        <table class="mytable" id="mytable">
          <thead>
            <tr>
              <th>Product Name</th>
              <th>Price</th>
              <th>Quantity</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="mycart-items">
           
            <!-- Cart items will be displayed here -->
          </tbody>
          <tfoot>
            <tr>
              <td></td>
              <td>Total:</td>
              
              <td id="mytotal-price">₹0</td>
              <td></td>
            </tr>
          </tfoot>
        </table>
        <a href="#divToConvert">
        <button  class="btn btn-success">Preview Invoice</button>   </a>             
      </div>
    </div>
  </div>













<script>

    function mygeneratePDF() {
      const doc = new jsPDF();
  
      const table = document.getElementById("mytable");
      const columnsToInclude = [0, 1, 2]; // Indexes of the columns to include in the PDF
  
      
      const data = [];
  
     
      const headerData = [];
      for (let i = 0; i < columnsToInclude.length; i++) {
        const cell = table.rows[0].cells[columnsToInclude[i]];
        headerData.push(cell ? cell.innerText : ""); 
      }
      data.push(headerData);
  
      
      for (let i = 1; i < table.rows.length; i++) {
        const rowData = [];
        for (let j = 0; j < columnsToInclude.length; j++) {
          const cell = table.rows[i].cells[columnsToInclude[j]];
          rowData.push(cell ? cell.innerText : ""); 
        }
        data.push(rowData);
      }
  
     
      const columnWidths = [40, 30, 40]; 
  
      doc.autoTable({
        head: [data[0]],
        body: data.slice(1),
        startY: 20,
        styles: { overflow: 'linebreak', columnWidth: 'wrap' },
        columnStyles: {
          0: { columnWidth: columnWidths[0] },
          1: { columnWidth: columnWidths[1] },
          2: { columnWidth: columnWidths[2] },
         
        }
      });
  
      doc.save("table.pdf");
    }
  
  
    function myremove_item(productId) {
      event.preventDefault();
  
      if (confirm("Are you sure you want to remove it?")) {
        
        window.location.href = `/remove_items/${productId}?cart=${JSON.stringify(cart)}`;
      }
    }
  
  
  
  </script>
  <script>
    function myaddToCart(productId, productName, productPrice) {
      let cart = JSON.parse(localStorage.getItem('mycart')) || [];
      let existingItem = cart.find(item => item.productId === productId);

      if (existingItem) {
        existingItem.quantity += 1;
      } else {
        cart.push({ productId, productName, productPrice, quantity: 1 });
      }

      localStorage.setItem('mycart', JSON.stringify(cart));
      myupdateCartUI();


	  
    }

    function myremoveCartItem(productId) {
      let cart = JSON.parse(localStorage.getItem('mycart')) || [];
      let existingItem = cart.find(item => item.productId === productId);

      if (existingItem) {
        if (existingItem.quantity > 1) {
          existingItem.quantity -= 1;
        } else {
          cart = cart.filter(item => item.productId !== productId);
        }

        localStorage.setItem('mycart', JSON.stringify(cart));
        myupdateCartUI();
      }
    }





   
  </script>
  <script>
 function myupdateCartUI() {
  const cart = JSON.parse(localStorage.getItem('mycart')) || [];
  const cartItems = document.getElementById('mycart-items');
  const totalPriceElement = document.getElementById('mytotal-price');

  cartItems.innerHTML = '';
  let total = 0;

  cart.forEach(item => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${item.productName}</td>
      <td>
        ₹<span id="price-${item.productId}">${item.productPrice}</span>
      
      </td>
      <td>${item.quantity}</td>
      <td>
        <button class="btn btn-danger" onclick="myremoveCartItem('${item.productId}');removeCartItem('${item.productId}')">Remove</button>
      </td>
      <td>
        <button class="btn btn-primary" onclick="myeditCartItem('${item.productId}', '${item.productPrice}');editCartItem('${item.productId}', '${item.productPrice}')">Edit</button>
        </td>
    `;
    cartItems.appendChild(row);

    total += item.productPrice * item.quantity;
  });

  totalPriceElement.textContent = `₹${total}`;
}

function myeditCartItem(productId, currentPrice) {
  const newPrice = prompt('Enter the new price:', currentPrice);

  // If the user clicks "Cancel" or provides an invalid value, do nothing
  if (newPrice === null || isNaN(parseFloat(newPrice)) || newPrice <= 0) {
    return;
  }

  // Update the local storage with the new price
  const cart = JSON.parse(localStorage.getItem('mycart')) || [];
  const updatedCart = cart.map(item => {
    if (item.productId === productId) {
      item.productPrice = parseFloat(newPrice);
    }
    return item;
  });

  localStorage.setItem('mycart', JSON.stringify(updatedCart));

  // Update the UI
  myupdateCartUI();
}

myupdateCartUI();
</script>


</div>
</div>
</div>


	
	<script src="https://cdn.jsdelivr.net/npm/pikaday/pikaday.js"></script>
	<script>
        window.addEventListener('DOMContentLoaded', function() {
			const today = new Date();
		
            var picker = new Pikaday({
				keyboardInput: false,
				field: document.querySelector('.js-datepicker'),
				format: 'MMM D YYYY',
				theme: 'date-input',
				i18n: {
					previousMonth: "Prev",
					nextMonth: "Next",
					months: [
						"Jan",
						"Feb",
						"Mar",
						"Apr",
						"May",
						"Jun",
						"Jul",
						"Aug",
						"Sep",
						"Oct",
						"Nov",
						"Dec"
					],
					weekdays: [
						"Sunday",
						"Monday",
						"Tuesday",
						"Wednesday",
						"Thursday",
						"Friday",
						"Saturday"
					],
					weekdaysShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
				}
			});
			picker.setDate(new Date());

			var picker2 = new Pikaday({
				keyboardInput: false,
				field: document.querySelector('.js-datepicker-2'),
				format: 'MMM D YYYY',
				theme: 'date-input',
				i18n: {
					previousMonth: "Prev",
					nextMonth: "Next",
					months: [
						"Jan",
						"Feb",
						"Mar",
						"Apr",
						"May",
						"Jun",
						"Jul",
						"Aug",
						"Sep",
						"Oct",
						"Nov",
						"Dec"
					],
					weekdays: [
						"Sunday",
						"Monday",
						"Tuesday",
						"Wednesday",
						"Thursday",
						"Friday",
						"Saturday"
					],
					weekdaysShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
				}
			});
			picker2.setDate(new Date());
		});

		function invoices() {
			return {
				items: [],
				invoiceNumber: 0,
				invoiceDate: '',
				invoiceDueDate: '',

				totalGST: 0,
				netTotal: 0,

				item: {
					id: '',
					name: '',
					qty: 0,
					rate: 0,
					total: 0,
					gst: 18
				},

				billing: {
					name: '',
					address: '',
					extra: ''
				},
				from: {
					name: '',
					address: '',
					extra: ''
				},

				showTooltip: false,
				showTooltip2: false,
				openModal: false,

				addItem() {
					this.items.push({
						id: this.generateUUID(),
						name: this.item.name,
						qty: this.item.qty,
						rate: this.item.rate,
						gst: this.calculateGST(this.item.gst, this.item.rate),
						total: this.item.qty * this.item.rate
					})

					this.itemTotal();
					this.itemTotalGST();

					this.item.id = '';
					this.item.name = '';
					this.item.qty = 0;
					this.item.rate = 0;
					this.item.gst = 18;
					this.item.total = 0;
				},

				deleteItem(uuid) {
					this.items = this.items.filter(item => uuid !== item.id);

					this.itemTotal();
					this.itemTotalGST();
				},

				itemTotal() {
					this.netTotal = this.numberFormat(this.items.length > 0 ? this.items.reduce((result, item) => {
						return result + item.total;
					}, 0) : 0);
				},

				itemTotalGST() {
                    this.totalGST =  this.numberFormat(this.items.length > 0 ? this.items.reduce((result, item) => {
						return result + (item.gst * item.qty);
					}, 0) : 0);
				},

				calculateGST(GSTPercentage, itemRate) {
					return this.numberFormat((itemRate - (itemRate * (100 / (100 + GSTPercentage)))).toFixed(2));
				},

				generateUUID() {
					return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
						var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
						return v.toString(16);
					});
				},

				generateInvoiceNumber(minimum, maximum) {
					const randomNumber = Math.floor(Math.random() * (maximum - minimum)) + minimum;
					this.invoiceNumber = '#INV-'+ randomNumber;
				},

				numberFormat(amount) {
					return amount.toLocaleString("en-US", {
						style: "currency",
						currency: "INR"
					});
				},

				printInvoice() {
					var printContents = this.$refs.printTemplate.innerHTML;
					var originalContents = document.body.innerHTML;

					document.body.innerHTML = printContents;
					window.print();
					document.body.innerHTML = originalContents;
				}
			}
		}
	</script>
	
<body class="antialiased sans-serif" >
	<div id="divToConvert">
	<br>	<br>
	<div class="border-t-8 border-gray-700 h-2" style="width: 80%;margin: 0 auto;"></div>
	<br>	
	<div style="width: 80%; box-shadow: 0 8px 8px rgba(1, 0.1, 0.1, 0.1);border-radius: 8px;"
		class="container mx-auto py-6 px-4"
		x-data="invoices()"
		x-init="generateInvoiceNumber(111111, 999999);"
		x-cloak
	>
		<div class="flex justify-between">
			<h1 style="font-family: Nabla;">ZAPPY PHOTOGRAPHY</h1>
			
			<div>
				<div class="relative mr-4 inline-block">
					<div class="text-gray-500 cursor-pointer w-10 h-10 rounded-full bg-gray-100 hover:bg-gray-300 inline-flex items-center justify-center" @mouseenter="showTooltip = true" @mouseleave="showTooltip = false" @click="printInvoice()">
						<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-printer" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
							<rect x="0" y="0" width="24" height="24" stroke="none"></rect>
							<path d="M17 17h2a2 2 0 0 0 2 -2v-4a2 2 0 0 0 -2 -2h-14a2 2 0 0 0 -2 2v4a2 2 0 0 0 2 2h2" />
							<path d="M17 9v-4a2 2 0 0 0 -2 -2h-6a2 2 0 0 0 -2 2v4" />
							<rect x="7" y="13" width="10" height="8" rx="2" />
						</svg>				  
					</div>
					<div x-show.transition="showTooltip" class="z-40 shadow-lg text-center w-32 block absolute right-0 top-0 p-2 mt-12 rounded-lg bg-gray-800 text-white text-xs">
						Print this invoice!
					</div>
				</div>
				
				
			</div>
		</div>



		<div class="flex mb-8 justify-between">
			<div class="w-2/4">
				<div class="mb-2 md:mb-1 md:flex items-center">
					<label class="w-32 text-gray-800 block font-bold text-sm uppercase tracking-wide">Invoice No.</label>
					<span class="mr-4 inline-block hidden md:block">:</span>
					<div class="flex-1">
					<input class="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-48 py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500" id="inline-full-name" type="text" placeholder="eg. #INV-100001" x-model="invoiceNumber">
					</div>
				</div>

				<div class="mb-2 md:mb-1 md:flex items-center">
					<label class="w-32 text-gray-800 block font-bold text-sm uppercase tracking-wide">Invoice Date</label>
					<span class="mr-4 inline-block hidden md:block">:</span>
					<div class="flex-1">
					<input class="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-48 py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500 js-datepicker" type="text" id="datepicker1" placeholder="eg. 17 Feb, 2020" x-model="invoiceDate" x-on:change="invoiceDate = document.getElementById('datepicker1').value" autocomplete="off" readonly>
					</div>
				</div>

			
			</div>
			<div>
				<div class="w-32 h-32 mb-1 border rounded-lg overflow-hidden relative bg-gray-100">
					<img id="image" class="object-cover w-full h-32" src="https://placehold.co/300x300/e2e8f0/e2e8f0" />
					
					<div class="absolute top-0 left-0 right-0 bottom-0 w-full block cursor-pointer flex items-center justify-center" onClick="document.getElementById('fileInput').click()">
						<button type="button"
							style="background-color: rgba(255, 255, 255, 0.65)"
							class="hover:bg-gray-100 text-gray-700 font-semibold py-2 px-4 text-sm border border-gray-300 rounded-lg shadow-sm"
						>
							<svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-camera" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
								<rect x="0" y="0" width="24" height="24" stroke="none"></rect>
								<path d="M5 7h1a2 2 0 0 0 2 -2a1 1 0 0 1 1 -1h6a1 1 0 0 1 1 1a2 2 0 0 0 2 2h1a2 2 0 0 1 2 2v9a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-9a2 2 0 0 1 2 -2" />
								<circle cx="12" cy="13" r="3" />
							</svg>							  
						</button>
					</div>
				</div>
				<input name="photo" id="fileInput" accept="image/*" class="hidden" type="file" onChange="let file = this.files[0]; 
					var reader = new FileReader();

					reader.onload = function (e) {
						document.getElementById('image').src = e.target.result;
						document.getElementById('image2').src = e.target.result;
					};
				
					reader.readAsDataURL(file);
				">
			</div>
			
		</div>
		
		<div class="flex flex-wrap justify-between mb-8">
			<div class="w-full md:w-1/3 mb-2 md:mb-0">
				<label class="text-gray-800 block mb-1 font-bold text-sm uppercase tracking-wide">Bill/Ship To:</label>
				<input class="mb-1 bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500" id="inline-full-name" type="text" placeholder="Billing company name" x-model="billing.name">
				<input class="mb-1 bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500" id="inline-full-name" type="text" placeholder="Billing company address" x-model="billing.address">
				<input class="mb-1 bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500" id="inline-full-name" type="text" placeholder="Additional info" x-model="billing.extra">
			</div>
			<div class="w-full md:w-1/3">
				<label class="text-gray-800 block mb-1 font-bold text-sm uppercase tracking-wide">From:</label>
				<input class="mb-1 bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500" id="inline-full-name" type="text" placeholder="Your company name" x-model="from.name">

				<input class="mb-1 bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500" id="inline-full-name" type="text" placeholder="Your company address" x-model="from.address">

				<input class="mb-1 bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500" id="inline-full-name" type="text" placeholder="Additional info" x-model="from.extra">
			</div>
		</div>

		<table class="table" id="table">
			<thead>
			  <tr>
				<th>Product Name</th>
				<th>Price</th>
				<th>Quantity</th>
			
			  </tr>
			</thead>
			<tbody id="cart-items">
			 
			  <!-- Cart items will be displayed here -->
			</tbody>
			<tfoot>
			  <tr>
				<td></td>
				
			
				<td></td>
			  </tr>
			</tfoot>
		  </table>
	    <template x-for="invoice in items" :key="invoice.id">
			<div class="flex -mx-1 py-2 border-b">
				<div class="flex-1 px-1">
					<p class="text-gray-800" x-text="invoice.name"></p>
				</div>

				<div class="px-1 w-20 text-right">
					<p class="text-gray-800" x-text="invoice.qty"></p>
				</div>

				<div class="px-1 w-32 text-right">
					<p class="text-gray-800" x-text="numberFormat(invoice.rate)"></p>
				</div>

				<div class="px-1 w-32 text-right">
					<p class="text-gray-800" x-text="numberFormat(invoice.total)"></p>
				</div>

				<div class="px-1 w-20 text-right">
					<a href="#" class="text-red-500 hover:text-red-600 text-sm font-semibold" @click.prevent="deleteItem(invoice.id)">Delete</a>
				</div>
			</div>
		</template>

		

		<div class="py-2 ml-auto mt-5 w-full sm:w-2/4 lg:w-1/4">
			
		
			<div class="py-2 border-t border-b">
				<div class="flex justify-between">
					<div class="text-xl text-gray-600 text-right flex-1">Grand Total</div>
					<div class="text-right w-40">
						<div class="text-xl text-gray-1000 font-bold"  id="total-price" ></div>
					</div>
				</div>
			</div>
		</div>

		

		<!-- Print Template -->
		<div id="js-print-template" x-ref="printTemplate" class="hidden">
			<div class="mb-8 flex justify-between">
				
				<div>
					<BR><BR>
					<h2 style="font-family: Nabla;">ZAPPY PHOTOGRAPHY</h2>
					
					<div class="mb-1 flex items-center">
						<label class="w-32 text-gray-800 block font-bold text-xs uppercase tracking-wide">Invoice No.</label>
						<span class="mr-4 inline-block">:</span>
						<div x-text="invoiceNumber"></div>
					</div>
		
					<div class="mb-1 flex items-center">
						<label class="w-32 text-gray-800 block font-bold text-xs uppercase tracking-wide">Invoice Date</label>
						<span class="mr-4 inline-block">:</span>
						<div x-text="invoiceDate"></div>
					</div>
		
					
				</div>
				<div class="pr-5">
					<div class="w-32 h-32 mb-1 overflow-hidden">
						<img id="image2" class="object-cover w-20 h-20" />
					</div>
				</div>
			</div>

			<div class="flex justify-between mb-10">
				<div class="w-1/2">
					<label class="text-gray-800 block mb-2 font-bold text-xs uppercase tracking-wide">Bill/Ship To:</label>
					<div>
						<div x-text="billing.name"></div>
						<div x-text="billing.address"></div>
						<div x-text="billing.extra"></div>
					</div>
				</div>
				<div class="w-1/2">
					<label class="text-gray-800 block mb-2 font-bold text-xs uppercase tracking-wide">From:</label>
					<div>
						<div x-text="from.name"></div>
						<div x-text="from.address"></div>
						<div x-text="from.extra"></div>
					</div>
				</div>
			</div>
			
			<template x-for="invoice in items" :key="invoice.id">
				<div class="flex flex-wrap -mx-1 py-2 border-b">
					<div class="flex-1 px-1">
						<p class="text-gray-800" x-text="invoice.name"></p>
					</div>
	
					<div class="px-1 w-32 text-right">
						<p class="text-gray-800" x-text="invoice.qty"></p>
					</div>
	
					<div class="px-1 w-32 text-right">
						<p class="text-gray-800" x-text="numberFormat(invoice.rate)"></p>
					</div>
	
					
				</div>
			</template>
			
			

			
		</div>
		<!-- /Print Template -->

		<!-- Modal -->
	
		<!-- /Modal -->

	</div>
	
	<br>	<br>
</div>
	<script src="https://cdn.jsdelivr.net/npm/pikaday/pikaday.js"></script>
	<script>
        window.addEventListener('DOMContentLoaded', function() {
			const today = new Date();
		
            var picker = new Pikaday({
				keyboardInput: false,
				field: document.querySelector('.js-datepicker'),
				format: 'MMM D YYYY',
				theme: 'date-input',
				i18n: {
					previousMonth: "Prev",
					nextMonth: "Next",
					months: [
						"Jan",
						"Feb",
						"Mar",
						"Apr",
						"May",
						"Jun",
						"Jul",
						"Aug",
						"Sep",
						"Oct",
						"Nov",
						"Dec"
					],
					weekdays: [
						"Sunday",
						"Monday",
						"Tuesday",
						"Wednesday",
						"Thursday",
						"Friday",
						"Saturday"
					],
					weekdaysShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
				}
			});
			picker.setDate(new Date());

			var picker2 = new Pikaday({
				keyboardInput: false,
				field: document.querySelector('.js-datepicker-2'),
				format: 'MMM D YYYY',
				theme: 'date-input',
				i18n: {
					previousMonth: "Prev",
					nextMonth: "Next",
					months: [
						"Jan",
						"Feb",
						"Mar",
						"Apr",
						"May",
						"Jun",
						"Jul",
						"Aug",
						"Sep",
						"Oct",
						"Nov",
						"Dec"
					],
					weekdays: [
						"Sunday",
						"Monday",
						"Tuesday",
						"Wednesday",
						"Thursday",
						"Friday",
						"Saturday"
					],
					weekdaysShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
				}
			});
			picker2.setDate(new Date());
		});

		function invoices() {
			return {
				items: [],
				invoiceNumber: 0,
				invoiceDate: '',
				invoiceDueDate: '',

				totalGST: 0,
				netTotal: 0,

				item: {
					id: '',
					name: '',
					qty: 0,
					rate: 0,
					total: 0,
					gst: 18
				},

				billing: {
					name: '',
					address: '',
					extra: ''
				},
				from: {
					name: '',
					address: '',
					extra: ''
				},

				showTooltip: false,
				showTooltip2: false,
				openModal: false,

				addItem() {
					this.items.push({
						id: this.generateUUID(),
						name: this.item.name,
						qty: this.item.qty,
						rate: this.item.rate,
						gst: this.calculateGST(this.item.gst, this.item.rate),
						total: this.item.qty * this.item.rate
					})

					this.itemTotal();
					this.itemTotalGST();

					this.item.id = '';
					this.item.name = '';
					this.item.qty = 0;
					this.item.rate = 0;
					this.item.gst = 18;
					this.item.total = 0;
				},

				deleteItem(uuid) {
					this.items = this.items.filter(item => uuid !== item.id);

					this.itemTotal();
					this.itemTotalGST();
				},

				itemTotal() {
					this.netTotal = this.numberFormat(this.items.length > 0 ? this.items.reduce((result, item) => {
						return result + item.total;
					}, 0) : 0);
				},

				itemTotalGST() {
                    this.totalGST =  this.numberFormat(this.items.length > 0 ? this.items.reduce((result, item) => {
						return result + (item.gst * item.qty);
					}, 0) : 0);
				},

				calculateGST(GSTPercentage, itemRate) {
					return this.numberFormat((itemRate - (itemRate * (100 / (100 + GSTPercentage)))).toFixed(2));
				},

				generateUUID() {
					return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
						var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
						return v.toString(16);
					});
				},

				generateInvoiceNumber(minimum, maximum) {
					const randomNumber = Math.floor(Math.random() * (maximum - minimum)) + minimum;
					this.invoiceNumber = '#INV-'+ randomNumber;
				},

				numberFormat(amount) {
					return amount.toLocaleString("en-US", {
						style: "currency",
						currency: "INR"
					});
				},

				printInvoice() {
    var printContents = this.$refs.printTemplate.innerHTML;

    // If the table content is generated dynamically, make sure it's included in printContents
    var tableContent = document.getElementById('table').innerHTML;
    printContents += '<table class="table">' + tableContent + '</table>';

    // Include the Grand Total section
    var grandTotalContent = document.querySelector('.py-2.border-t.border-b').outerHTML;
    printContents += grandTotalContent;

    // Include the 'netTotal' content
    // var netTotalContent = document.getElementById('mytotal-price').innerHTML;
    // printContents += '<div class="text-xl text-gray-1000 font-bold">' + netTotalContent + '</div>';

    var originalContents = document.body.innerHTML;

    document.body.innerHTML = printContents;
    window.print();
    document.body.innerHTML = originalContents;
}


			}
		}
	</script>



  <script>

    function generatePDF() {
      const doc = new jsPDF();
  
      const table = document.getElementById("table");
      const columnsToInclude = [0, 1, 2]; // Indexes of the columns to include in the PDF
  
      
      const data = [];
  
     
      const headerData = [];
      for (let i = 0; i < columnsToInclude.length; i++) {
        const cell = table.rows[0].cells[columnsToInclude[i]];
        headerData.push(cell ? cell.innerText : ""); 
      }
      data.push(headerData);
  
      
      for (let i = 1; i < table.rows.length; i++) {
        const rowData = [];
        for (let j = 0; j < columnsToInclude.length; j++) {
          const cell = table.rows[i].cells[columnsToInclude[j]];
          rowData.push(cell ? cell.innerText : ""); 
        }
        data.push(rowData);
      }
  
     
      const columnWidths = [40, 30, 40]; 
  
      doc.autoTable({
        head: [data[0]],
        body: data.slice(1),
        startY: 20,
        styles: { overflow: 'linebreak', columnWidth: 'wrap' },
        columnStyles: {
          0: { columnWidth: columnWidths[0] },
          1: { columnWidth: columnWidths[1] },
          2: { columnWidth: columnWidths[2] },
         
        }
      });
  
      doc.save("table.pdf");
    }
  
  
    function remove_item(productId) {
      event.preventDefault();
  
      if (confirm("Are you sure you want to remove it?")) {
        
        window.location.href = `/remove_items/${productId}?cart=${JSON.stringify(cart)}`;
      }
    }
  
  
  
  </script>
  <script>
    function addToCart(productId, productName, productPrice) {
      let cart = JSON.parse(localStorage.getItem('cart')) || [];
      let existingItem = cart.find(item => item.productId === productId);

      if (existingItem) {
        existingItem.quantity += 1;
      } else {
        cart.push({ productId, productName, productPrice, quantity: 1 });
      }

      localStorage.setItem('cart', JSON.stringify(cart));
      updateCartUI();
    }

    function removeCartItem(productId) {
		console.log('am  working')
      let cart = JSON.parse(localStorage.getItem('cart')) || [];
      let existingItem = cart.find(item => item.productId === productId);

      if (existingItem) {
        if (existingItem.quantity > 1) {
          existingItem.quantity -= 1;
        } else {
          cart = cart.filter(item => item.productId !== productId);
        }

        localStorage.setItem('cart', JSON.stringify(cart));
        updateCartUI();
      }
    }





   
  </script>
  <script>
 function updateCartUI() {
  const cart = JSON.parse(localStorage.getItem('cart')) || [];
  const cartItems = document.getElementById('cart-items');
  const totalPriceElement = document.getElementById('total-price');

  cartItems.innerHTML = '';
  let total = 0;

  cart.forEach(item => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${item.productName}</td>
      <td>
        ₹<span id="price-${item.productId}">${item.productPrice}</span>
      
      </td>
      <td>${item.quantity}</td>
	  <td>
     
     
    `;
    cartItems.appendChild(row);

    total += item.productPrice * item.quantity;
  });

  totalPriceElement.textContent = `₹${total}`;
}

function editCartItem(productId, currentPrice) {
  const newPrice = prompt('Reenter the new price:', currentPrice);

  // If the user clicks "Cancel" or provides an invalid value, do nothing
  if (newPrice === null || isNaN(parseFloat(newPrice)) || newPrice <= 0) {
    return;
  }

  // Update the local storage with the new price
  const cart = JSON.parse(localStorage.getItem('cart')) || [];
  const updatedCart = cart.map(item => {
    if (item.productId === productId) {
      item.productPrice = parseFloat(newPrice);
    }
    return item;
  });

  localStorage.setItem('cart', JSON.stringify(updatedCart));

  // Update the UI
  updateCartUI();
}

updateCartUI();



function downloadPDF() {
  const element = document.getElementById('divToConvert'); // Replace 'divToConvert' with your div's ID
  html2pdf(element, {
    margin: 10,
    image: { type: 'jpeg', quality: 1.0 }, // Use JPEG format with maximum quality
    html2canvas: { scale: 2 }, // Increase scale for higher resolution
    jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' } // Adjust PDF settings
  }).from(element).save('div_as_pdf.pdf');
}


</script>
	</div>
</body>
</html>